class Solution {
public:
    vector<int>parent;
    int find(int node)
    {
        if(parent[node]==-1)
            return node;
        return find(parent[node]);
    }
    void unite(int a,int b)
    {
        parent[b]=a;
        parent[a]=-1;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        parent.resize(n);
        for(int i=0;i<n;i++)
            parent[i]=-1;
        unordered_map<int,int>cnt;
        for(int i=0;i<n;i++)
            cnt[i]=1;
        for(int i=0;i<graph.size();i++)
        {
            for(int j=i+1;j<graph[i].size();j++)
            {
                if(graph[i][j]==1)
                {
                    int x=find(i);
                    int y=find(j);
                    if(x!=y)
                    {
                        unite(x,y);
                        cnt[x]+=cnt[y];
                    }
                }
            }
        }
        int ans=INT_MAX;
        for(int i=00;i<initial.size();i++)
            ans=min(ans,initial[i]);
        int maxi=0;
        unordered_map<int,int>vis;
        for(int i=0;i<initial.size();i++)
        {
            int par=find(initial[i]);
            vis[par]++;
        }
        for(int i=0;i<initial.size();i++)
        {
            int par=find(initial[i]);
            if(vis[par]==1)
            {
                if(cnt[par]>maxi)
                {
                    maxi=cnt[par];
                    ans=initial[i];
                }
                else if(cnt[par]==maxi)
                {
                    ans=min(ans,initial[i]);
                }
            }
        }
        return ans;
    }
};